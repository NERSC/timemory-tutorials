stephey@cori06:/global/cscratch1/sd/stephey/timemory-tutorials/tutorial-day-1/python-api-and-tools/solutions> python -m timemory.trace -d timemory-trace-output  -- ./example.py
[timemory]> tracing: ['/global/cscratch1/sd/stephey/timemory-tutorials/tutorial-day-1/python-api-and-tools/solutions/example.py']
cmd: execfile_('/global/cscratch1/sd/stephey/timemory-tutorials/tutorial-day-1/python-api-and-tools/solutions/example.py', globals())
Running fibonacci...
Running inefficient...
Answer = 509443184046766.0
[wall]|0> Outputting 'timemory-trace-output/wall.flamegraph.json'...
[wall]|0> Outputting 'timemory-trace-output/wall.json'...
[wall]|0> Outputting 'timemory-trace-output/wall.tree.json'...
[wall]|0> Outputting 'timemory-trace-output/wall.txt'...

|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|                                                                                    REAL-CLOCK TIMER (I.E. WALL-CLOCK TIMER)                                                                                    |
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|                                                        LABEL                                                         | COUNT  | DEPTH  | METRIC | UNITS  |  SUM   | MEAN   |  MIN   |  MAX   | STDDEV | % SELF |
|----------------------------------------------------------------------------------------------------------------------|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|
| >>> import sys                                                                              [<module>/example.py:01] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>> import numpy as np                                                                      [<module>/example.py:02] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>> def fib(n):                                                                             [<module>/example.py:05] |  10948 |      0 | wall   | sec    |  0.345 |  0.000 |  0.345 |  0.345 |  0.000 |  100.0 |
| >>>     return n if n < 2 else (fib(n - 1) + fib(n - 2))                                    [<module>/example.py:06] |  21892 |      0 | wall   | sec    |  0.141 |  0.000 |  0.141 |  0.141 |  0.000 |  100.0 |
| >>> def inefficient(n):                                                                     [<module>/example.py:09] |      2 |      0 | wall   | sec    |  0.195 |  0.097 |  0.195 |  0.195 |  0.000 |  100.0 |
| >>>     a = 0                                                                               [<module>/example.py:10] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     for i in range(n):                                                                  [<module>/example.py:11] |     21 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>         a += i                                                                          [<module>/example.py:12] |     20 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>         for j in range(n):                                                              [<module>/example.py:13] |    420 |      0 | wall   | sec    |  0.002 |  0.000 |  0.002 |  0.002 |  0.000 |  100.0 |
| >>>             a += j                                                                      [<module>/example.py:14] |    400 |      0 | wall   | sec    |  0.002 |  0.000 |  0.002 |  0.002 |  0.000 |  100.0 |
| >>>     arr = np.arange(a * n * n * n, dtype=np.double)                                     [<module>/example.py:15] |      1 |      0 | wall   | sec    |  0.157 |  0.157 |  0.157 |  0.157 |  0.000 |  100.0 |
| >>>     return arr.sum()                                                                    [<module>/example.py:16] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>> def run(n):                                                                             [<module>/example.py:19] |      2 |      0 | wall   | sec    |  0.712 |  0.356 |  0.712 |  0.712 |  0.000 |  100.0 |
| >>>     ret = 0                                                                             [<module>/example.py:20] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     print("Running fibonacci...")                                                       [<module>/example.py:21] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     ret += fib(n)                                                                       [<module>/example.py:22] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     ret += fib(n % 5 + 1)                                                               [<module>/example.py:23] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     print("Running inefficient...")                                                     [<module>/example.py:24] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     ret += inefficient(n)                                                               [<module>/example.py:25] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     return ret                                                                          [<module>/example.py:26] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>> if __name__ == "__main__":                                                              [<module>/example.py:29] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     n = int(sys.argv[1]) if len(sys.argv) > 1 else 20                                   [<module>/example.py:30] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     ans = run(n)                                                                        [<module>/example.py:31] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>>     print("Answer = {}".format(ans))                                                    [<module>/example.py:32] |      1 |      0 | wall   | sec    |  0.000 |  0.000 |  0.000 |  0.000 |  0.000 |  100.0 |
| >>> def _sum(a, axis=None, dtype=None, out=None, keepdims=False,                              [_sum/_methods.py:036] |      1 |      0 | wall   | sec    |  0.024 |  0.024 |  0.024 |  0.024 |  0.000 |  100.0 |
| >>>          initial=_NoValue, where=True):                                                   [_sum/_methods.py:037] |        |      0 |        |        |        |        |        |        |        |        |
| >>>     return umr_sum(a, axis, dtype, out, keepdims, initial, where)                         [_sum/_methods.py:038] |      1 |      0 | wall   | sec    |  0.024 |  0.024 |  0.024 |  0.024 |  0.000 |  100.0 |
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

